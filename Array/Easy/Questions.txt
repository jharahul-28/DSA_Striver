 1. Largest element in an array
    Brute force- sort and return (n-1)th element, O(nlog(n))
    Optimal- initialise largest element with 0th element and compare with the rest of the elements, O(n)

 2. 2nd largest
    Brute- sort and run a loop from n-2 to 0 to find the second largest, O(nlog(n) + n)
    Better- run loop to find largest, run another loop to check each element if it is larger than others and smaller than largest, O(2n)
    Optimal- initialise largest with 0th element and slargest with INT_MIN. run loop and if largest found then update largest and set slargest with largest, and keep checking if each element is smaller than slargest

 3. Check if sorted
    check if ith < (i+1), else return false, at the end return true

 4. Remove duplicate elements and return no. of unique elements 
    Brute- insert in set, pop elements from set and store in array and increment the index, return index, TC- O(nlog(n)+n) & SC- O(n)
    Optimal- a pointer(ind) at 0th index then we traverse the loop with another pointer and from 1 to n, check where both pointer points at different elements.

 5. Left rotate an array by one place
    store the 0th index index then a[i-1]=a[i], O(n)

 6. Left rotate by D spaces
    Brute- store the first D elements in an another array, now shift by (n-d) index, now place the elements stored in another array, TC- O(n+d), SC- O(d)
    Optimal- first reverse (0-to-d) elements, then (d-n) elements, then reverse the whole array, TC- O(2n), SC- O(1)

 7. Move zeroes to end
    Brute- push_back non-zero elements in a new vector, copy the vector in original array and now run the loop from size of vector to nth place and insert 0s in the original array. TC- O(2n) SC- O(n)
    Optimal- find 1st zero and come out of the loop, store index of occurance of 1st zero in j, now run loop from j to n, in that loop see where is a non zero element and swap, increment j by 1.

 8. Union of 2 arrays
    Brute- take a set and insert elements, TC- O(n1logn1 + n2logn2) + O(n1+n2) SC- O(n1+n2)
    Optimal- array is sorted, take 2 pointers - 1 on each, store the first element of array1 and then compare with array2 if element of 1st is greater than 2nd, move 2nd pointer forward, else if element of 1st is compared with previously added element if not eqaul then add otherwise move pointer forward, when we reach the end of any array then add the elements of the other array after checking if it is not present. TC- 0(n1+n2), SC- 0(n1+n2)

 9. Intersesction of two sorted arrays
    Brute- Take a visited array, which contains flag whether the element is already taken in the Intersesction array. It will be for the array with fewer elements. now we iterate through the other array and search for the occurance of each element in the fewer array , and then again we check if the flag. TC- O(n*m)
    Optimal- two pointers pointing on the two arrays, if we find a match we increment both the pointers otherwise the smaller one.

 10. Missing number
    Brute: linear search, TC:O(N*N), SC:O(1)
    Better: use hashing TC: O(2*N), SC: O(n)
    Optimal: sum-take sum of each number from 1 to n, then take the sum of the given numbers, TC: O(N), OC: O(1) 
      xor- take xor of the given array, take xor from 1 till n, take xor of the two computed xor(s), TC: O(N), OC: O(1) 
      while summing the sum might cross the limit of INTEGER, taking long long will take extra spaces

 11. Max number of 1s
    Optimal: take a max1=0, and then iterate, if found 1 then increment counter and check max(cnt, max1), else if not found set counter to zero

 12. Find the number that appears once and others twice
    Brute: iterate through the array and search for each element after that index using linear search, if not found then return the number else proceed with the outer loop, TC:O(N*N), SC:O(1)
    Better: hashing- TC: O(2N), SC: O(maxelement)
            map- TC- O(nlog(n))+ O(n), SC- O(n/2 + 1)
    Optimal: Xor- TC: O(N), SC: O(1)

 13. Longest subarray with sum K
    Brute: run loop i for starting index of subarray, run loop j for adding element of subarray, if sum of each element equals k then check for max length. TC- O(n^2)
    Better (optimal if array element might be -ve): use hashing, we take a subarray from beginning and take it till each individual element, we take the sum from beginning of subarray till the end of subarray (x), now for sum of subarray of subrray to be 'k', the sum should be 'x-k', we will keep hashing each sum and look for 'x-k', if found then check for max length. TC: O(n log(n)) for ordered map , O(n*1) or O(n*n) for unordered map, SC: O(n)
    Optimal (if all array element is +ve): two pointer approach, if keep adding array elements and incrementing left pointer until sum of subarray is less than 'k', when equal we check for max length and increment right pointer, when greater we increment left pointer